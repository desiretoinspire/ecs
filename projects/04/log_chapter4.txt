machine language is an agreed upon formalism, designed to manipulate a 'memory' using a 'processor' and a set of 'registers'.

Memory 		- hardware devices that store data or instructions.
can access individual words by M[address] or RAM[address]

Processor 	- (CPU) performs elementary operations like arithematic and logic operations,Memory Access,Control(branching)

Register 	- High Speed local memory

3 Types of Operations
	1) Arithematic and Logic operations - 	addition,subtracion,bit-wise negation,bit-shifting,..(allowed on Registers and selected memory locations)
	2) Memory Access -	2 types,first as in the arithematic and logic operations and second explicit load and store commands.
		there are several types of addressing modes.
		Direct Addressing 	 - load value in the address into register 
		Immediate Addressing - used to load constant
		Indirect Addressing  - used to handle pointers
	3) Flow of Control - conditional and unconditional jumps

HACK Machine Language
---------------------
Von Newmann Platform - [This is an architecture consisting of a processing unit containing an ALU and processor registers, a control unit containing an instruction register and PC, a memory to store both data and instructions, secondary storage unit and I/O mechanisms]

here - It is a 16 bit machine , consisting of a CPU, 2 seperate memory modules(data,instruction) and 2 memory mapped I/O devices : screen and a keyboard

instruction Memory and Data Memory - both are 16-bit wide and have a 15-bit address space(32K).

Registers
---------
D-Register - store data values
A-Register - act as both data register and address register(both data & Instruction memory address)
since addresses are 15-bit wide, it is impossible to include both an operation code and an address in a single 16-bit instruction.ie Hack is a "1/2 address machine".
So (Data)Memory access is done with help of an implicit memory location symbol 'M'.where 'M' always refers to memory word with address in 'A' register.
'A' register is also used to facilitate direct access to instruction memory
Jump Instructions uses the value in 'A' register to fetch next instruction.

Every operation involving a memory location requires 2 hack commands.
1) Selecting the address one which we want to operate,
2) Specifying the desired operation.

2 generic instructions

1) A-instruction (Address-Instruction)
--------------------------------------
used to set 'A' register to a 15-bit value
syntax : @value
0vvv vvvv vvvv vvvv 	v = 0 or 1
value = either a non-negative decimal no. or a symbol referring to such number

uses
1 - to enter a constant.
2 - memory access
3 - jump instructions

2) C-instruction (Compute Instruction)
--------------------------------------
what to Compute?
where to store the Computed value?
what to do next?

syntax : dest=comp;jump
either the dest or jump field may be empty

111[a cccc cc][dd d][jjj]
		comp   dest jump

comp : is done on either D and A, or D and M depending on value of 'a' bit
dest : 1st bit - A register, 2nd bit - D register, 3rd bit - Memory[A]
jump : 1st bit - jump if value is -ve, 2nd bit - 0, 3rd	bit - +ve  

[NOTE]a C-instruction that may cause a jump,shouldn't contain a reference to M, and vice versa(because we are accessing instruction memory addresses).

Symbols
-------
1)Predefined Symbols - Special subset of RAM addresses
	a)Virtual Registers - R0 to R15 are RAM addresses 0 to 15
	b)Predefined pointers - SP,LCL,ARG,THIS,THAT ar 0 to 4
	b)IO pointers - SCREEN 16384,KBD 24576.
2)Label Symbols - (Xxx) used to label destinations of goto commands,means that Xxx refers to the instruction memory location of the next command in the program.
3)Variable Symbols - variable names

IO Handling
-----------
SCREEN and KBD interact through Memory Maps
SCREEN - (256rows*512columns) pixels(bits) == 256*32 = 8K words
pixel at row r from top and column c from left is mapped to c%16 bit(counting from LSB to MSB) of the word located at RAM[16384 + r.32 + c/16]
KBD 24576

Binary code files with .hack extension and assembly with .asm

(Symbols) are pseudo commands since it doesn't generate any machine instructions.